import{g as K,s as P,r as T,h as k,i as Q,o as v,c as g,f as d,t as i,j as A,a as e,k as X,v as Y,l as Z,d as $,F as j,m as q}from"./entry.86a705ca.js";import{j as ee,g as te,a as se,b as L,k as ne,l as le,p as ae,i as oe}from"./sync.8402a9e9.js";import{a as U}from"./likenft.a2d6550a.js";import{s as re}from"./sync.da280c3c.js";import{u as de}from"./wallet.fc0d483f.js";import"./index.4dd71626.js";const ue=e("h1",null,"Send NFT",-1),ie={key:0,style:{color:"red"}},ce={key:1,style:{color:"green"}},fe=e("hr",null,null,-1),ve={key:2},ge=e("h2",null,"1. Send NFT",-1),he=e("p",null,[e("label",null,"Enter default memo (optional)")],-1),me=e("p",null,[e("label",null,[$("Upload NFT CSV ( "),e("a",{href:"https://github.com/likecoin/iscn-nft-tools/blob/master/send-nft/list_example.csv",target:"_blank"}," list.csv "),$(") file: ")])],-1),_e={key:0},pe=e("thead",null,[e("tr",null,[e("td",null,"From Address"),e("td",null,"To Address"),e("td",null,"Class ID"),e("td",null,"Count")])],-1),Ie=e("br",null,null,-1),we=["disabled"],be={key:3},Se=e("thead",null,[e("tr",null,[e("td",null,"From Address"),e("td",null,"To Address"),e("td",null,"Class ID"),e("td",null,"NFT ID"),e("td",null,"Memo"),e("td",null,"Status")])],-1),Te=["disabled"],$e=K({__name:"index",setup(ye){const O=de(),{wallet:c,signer:D}=P(O),{connect:W}=O,C=T(1),y=T(""),b=T(!1),F=T(""),f=T([]),h=T([]),H=k(()=>{const a=f.value.reduce((s,o)=>{const l=`${o.from_address||""}-${o.classId}`;return s[l]||(s[l]={fromAddress:o.from_address||"",toAddress:o.to_address,classId:o.classId,count:0}),s[l].count+=1,s},{});return Object.values(a)}),V=k(()=>f.value.reduce((a,s)=>{const o=s.from_address||c.value;return a[o]||(a[o]=[]),a[o].push(s),a},{})),M=k(()=>Object.entries(V.value).reduce((a,[s,o])=>(a[s]=o.reduce((l,t)=>(l[t.classId]=(l[t.classId]||0)+1,l),{}),a),{})),N=k(()=>{const a={};return Object.entries(V.value).forEach(([s,o])=>{a[s]=o.reduce((l,t)=>(t.nftId&&(l[t.classId]=l[t.classId]||[],l[t.classId].push(t.nftId)),l),{})}),a});Q(b,a=>{a&&(y.value="")});async function z(){var a;try{if(b.value=!0,(!c.value||!D.value)&&await W(),!c.value||!D.value)return;if(!f.value.length)throw new Error("NFT data not exists");const s={};for(const[n,u]of Object.entries(M.value)){s[n]={};for(const r of Object.keys(u)){const m=M.value[n][r],{nfts:p}=await ee({classId:r,owner:n,needCount:m});if(s[n][r]=p,m>p.length)throw new Error(`NFT classId: ${r} (owner: ${n}, quantity: ${p.length}), Will send ${m} counts, NFT not enough!`);if((a=N.value[n])!=null&&a[r]){for(let I=0;I<N.value[n][r].length;I+=1){const _=N.value[n][r][I],{owner:B}=await te(r,_);if(B!==n)throw new Error(`NFT classId: ${r} nftId:${_} is not owned by ${n}!`)}s[n][r]=s[n][r].filter(I=>!N.value[n][r].includes(I.id))}}}const l=(await se(D.value)).getSigningStargateClient();if(!l)throw new Error("Signing client not exists");const t=f.value.some(n=>n.memo),{accountNumber:E,sequence:x}=await l.getSequence(c.value),w=await l.getChainId();C.value+=1;const S=[];let R=x;for(let n=0;n<f.value.length;n+=1){const u=f.value[n],r=u.from_address||c.value;let m=u.nftId;m||(m=s[r][u.classId].splice(0,1)[0].id),h.value[n].nftId=m;let p;if(r!==c.value?p={typeUrl:"/cosmos.authz.v1beta1.MsgExec",value:{grantee:c.value,msgs:[U(r,u.to_address,u.classId,m)]}}:p=U(r,u.to_address,u.classId,m),t){const I=await l.sign(c.value,[p],L(1),u.memo||F.value,{accountNumber:E,sequence:R,chainId:w});h.value[n].status="signed",R+=1;try{const _=ne.TxRaw.encode(I).finish(),B=await l.broadcastTx(_,1e3,1e3);h.value[n].status=`broadcasted ${B.transactionHash}`}catch(_){if(_ instanceof le.TimeoutError)h.value[n].status=`broadcasted ${_.txId}`;else throw h.value[n].status=`error ${_.toString()}`,_}}else S.push(p)}if(S.length){const n=await l.signAndBroadcast(c.value,S,L(f.value.length),F.value);for(let u=0;u<f.value.length;u+=1)h.value[u].status=`broadcasted ${n.transactionHash}`}}catch(s){console.error(s),y.value=s.toString()}finally{b.value=!1}}function G(a){var t;if(!(a!=null&&a.target))return;const s=(t=a.target)==null?void 0:t.files;if(!s)return;const[o]=s,l=new FileReader;l.onload=E=>{var x;try{const w=(x=E.target)==null?void 0:x.result;if(typeof w!="string")return;const S=ae(w,{columns:!0});f.value=S,h.value=S}catch(w){console.error(w),y.value=w.toString()}},l.readAsText(o)}function J(){oe(re(h.value),"result.csv","text/csv;charset=utf-8;")}return(a,s)=>{var o,l;return v(),g("div",null,[ue,d(y)?(v(),g("div",ie,i(d(y)),1)):A("",!0),d(b)?(v(),g("div",ce," Loading... ")):A("",!0),e("div",null,"Steps "+i(d(C))+" / 2",1),fe,d(C)===1?(v(),g("section",ve,[ge,e("div",null,[he,X(e("input",{"onUpdate:modelValue":s[0]||(s[0]=t=>Z(F)?F.value=t:null),placeholder:"default memo"},null,512),[[Y,d(F)]]),me,(o=d(f))!=null&&o.length?(v(),g("div",_e,[e("pre",null,"Number of NFT data in CSV:"+i((l=d(f))==null?void 0:l.length),1),$(" Summary "),e("table",null,[pe,e("tbody",null,[(v(!0),g(j,null,q(d(H),t=>(v(),g("tr",{key:t.fromAddress+"-"+t.fromAddress+"-"+t.classId},[e("td",null,i(t.fromAddress||d(c)),1),e("td",null,i(t.toAddress),1),e("td",null,i(t.classId),1),e("td",null,i(t.count),1)]))),128))])])])):A("",!0),e("input",{type:"file",onChange:G},null,32),Ie,e("button",{disabled:d(b),style:{"margin-top":"16px"},onClick:z}," Send ",8,we)])])):A("",!0),d(C)>1?(v(),g("section",be,[$(" Result: "),e("table",null,[Se,e("tbody",null,[(v(!0),g(j,null,q(d(h),t=>(v(),g("tr",{key:t[0]},[e("td",null,i(t.from_address||d(c)),1),e("td",null,i(t.to_address),1),e("td",null,i(t.classId),1),e("td",null,i(t.nftId),1),e("td",null,i(t.memo),1),e("td",null,i(t.status),1)]))),128))])]),e("button",{disabled:d(b),onClick:J}," Download NFT result csv ",8,Te)])):A("",!0)])}}});export{$e as default};
